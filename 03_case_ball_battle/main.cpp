#include <iostream>

using namespace std;

//本地服务 在单节点内是唯一的，但是它不具备全局唯一性，节点1和节点2都有gateway，每个节点都可以开启一个gateway，各自独立
//全局服务 所有节点中都具有唯一性的服务，比如agentmgr，可以部置在节点1，也可以节点2，但无论如何，所有节点只能开启一个

//各服务功能
//gateway
//网关，处理客户端连接服务，客户端会连接某个网关，如果玩家未登录，网关会把消息转发给节点某个登录服务器，
//处理账号校验，如果登录成功，会把消息转发给客户端对应的代理agent，一个节点可以开启多个网关以分摊性能。
//login
//登录服务，处理登录逻辑服务，比如账号校验，一个节点可以开启多个登录服务
//agent
//代理，每个客户端会对应一个代理服务，负责角色的数据加载，数据存储，单服逻辑的处理，出于性能考虑，agent必须与它对应的客户端连接（即客户端连接的gateway）处在同一个节点
//agentmgr
//管理代理agent的服务，记录每个agent所在的节点，避免不同的客户端登录同一账号
//nodemgr
//节点管理，每个节点会开启一个nodemgr服务，用于管理该节点和监控性能
//scene
//场景服务，处理战逻辑的服务，每一局游戏由一个场景服务器负责

//服务端消息处理流程
//登录过程  客户端-》gateway-》转发login-》校验成功由agentmgr创建与客户端对应的agent完成登录
//游戏过程 客户端-》gateway-》agent-》场景scene

//设计要点
//1.gateway
//gateway只做消息转发

//2.agent和scene的关系
//agent可以和任意一个scene通信

//3.agentmgr
//agentmgr仅记录agent的状态、处理玩家登录、登出功能，所有对它的访问都以玩家id为索引。 它是个单点，但很容易拓展成分布式。


//目录结构
//etc       存放配置文件
//luaclib   存放一些C模块
//lualib    存放lua模块
//service   存放各服务的lua代码
//skynet    skynet框架
//start.sh  启动服务器的脚本

//完整的登录流程
//1、客户端A连接服务端某个节点的某个gateway
//2、连上，但不知道客户端A登录哪个角色，客户端A发送登录消息，消息包含账号（101）和密码，gateway收到后，随机选择节点内login服务，将消息转发
//3、账号密码校验后，login服务会向agentmgr发起登录请求，agentmgr会记录所有在线玩家的状态，通过向agentmgr发请求，
//agentmgr判断账号是否登录，如果未登录，直接进入阶段6，否则将已登录的客户端踢下线
//4、agentmgr要求原客户端对应的agent下线，原agent保存角色数据，然后退出服务
//5、agentmgr通知原客户端对应的gateway，告诉客户端B你已被踢下线，设置gateway状态，取消客户端B与角色101的关联
//6、agnetmgr向nodemgr请求创建agnet服务，nodemgr节点管理，提供创建服务，节点监控功能
//7、创建新客户端对应的agent，新agent读取角色数据
//8、agent创建完毕，agentmgr会记录角色处于已登录状态，通知gateway，让它把新客户端和新agent关联起来
//9、进入游戏阶段，客户端发送的消息转发到新agent上

//掉线登出流程
//1、客户端A掉线，gateway要取消客户端与agent的关联
//2、gateway向agentmgr发起下线请求，所有上线下线的请求必须由agentmgr仲裁
//3、如果仲裁通过，agentmgr要求代理服务agent下线，agent保存角色数据，退出服务

//只有“已在线”状态的客户端方可被顶替下线，如果处于“登录中”或“登出中”，agentmgr会告诉新登录的客户端“ 其他玩家正在尝试登录该账号，请稍后再试” 。

//TCP粘包现象
//TCP协议是一种基于数据流的协议，举例来说，如果客户端分两次发送“ 1234” 和“ 5678” 这两条消息。 服务端可能一次性接收到“ 12345678” ；也可能先只收到“ 12” ，过一会儿才收到“ 345678” 。

//三种实现TCP数据切分的方法
//长度信息法     每个数据包前面加上长度信息，每次接收到数据后，先读取长度的字节，如果缓冲区数据长度大于要取的字节数，取出相应的字节，否则等待下一次接收
//固定长度法     每次以相同的长度发送数据，假定每条信息为10字符，那么hello，test，这两条信息发送成 hello..... test...... 其中.表示填充字符，接收方每次读取10个字符
//结束符号法     规定一个结束符号，作为消息间的分隔符，假定结速符号为$，那么hello，test，这两条信息发送成hello$ test$，接收方不停读取数据，直到$出现为止

//协议
//进入战场协议 enter,玩家ID,坐标,尺寸
//战场信息协议 balllist,玩家ID,坐标,尺寸    foodlist,食物ID,坐标
//生成食物协议 addfood,食物ID,坐标
//移动协议    shift,x,y    move,玩家ID,坐标
//吃食物协议  eat,玩家ID,食物ID,新尺寸
//离开协议    leave,玩家ID

int main() {
    return 0;
}
